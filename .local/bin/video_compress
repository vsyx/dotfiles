#!/bin/bash

show_usage() {
    echo "$0 -i input_file -t target_size_mb [-o output_file=./<input_file_without_ext>-<target_size>.mp4]"
}

if (( $# == 0 )); then
    >&2 show_usage
    exit 1
fi

unset INPUT_FILE TARGET_SIZE OUTPUT_FILE

while getopts "i:t:o:h" option; do
    case $option in
        i)
            INPUT_FILE=${OPTARG}
            ;;
        t)
            TARGET_SIZE=${OPTARG}  # target size in MB
            ;;
        o)
            OUTPUT_FILE=${OPTARG}
            ;;
        h)
            >&2 show_usage && exit 0
            ;;
    esac
done
shift "$((OPTIND - 1))"

if [[ -z $INPUT_FILE || -z $TARGET_SIZE ]]; then
    >&2 show_usage
    exit 1
fi

OUTPUT_FILE="${OUTPUT_FILE:=${INPUT_FILE%.*}-${TARGET_SIZE}MB.mp4}" 

# Original duration in seconds
O_DUR=$(\
    ffprobe \
    -v error \
    -show_entries format=duration \
    -of csv=p=0 "$INPUT_FILE")

# Original audio rate
O_ARATE=$(\
    ffprobe \
    -v error \
    -select_streams a:0 \
    -show_entries stream=bit_rate \
    -of csv=p=0 "$INPUT_FILE")

# Original audio rate in KiB/s
O_ARATE=$(\
    awk \
    -v arate="$O_ARATE" \
    'BEGIN { printf "%.0f", (arate / 1024) }')

# Target size is required to be less than the size of the original audio stream
T_MINSIZE=$(\
    awk \
    -v arate="$O_ARATE" \
    -v duration="$O_DUR" \
    'BEGIN { printf "%.2f", ( (arate * duration) / 8192 ) }')

# Equals 1 if target size is ok, 0 otherwise
IS_MINSIZE=$(\
    awk \
    -v size="$TARGET_SIZE" \
    -v minsize="$T_MINSIZE" \
    'BEGIN { print (minsize < size) }')

# Give useful information if size is too small
if [[ $IS_MINSIZE -eq 0 ]]; then
    printf "%s\n" "Target size ${TARGET_SIZE}MB is too small!" >&2
    printf "%s %s\n" "Try values larger than" "${T_MINSIZE}MB" >&2
    exit 1
fi

# Set target audio bitrate
T_ARATE=$O_ARATE

# Calculate target video rate - MB -> KiB/s
T_VRATE=$(\
    awk \
    -v size="$TARGET_SIZE" \
    -v duration="$O_DUR" \
    -v audio_rate="$O_ARATE" \
    'BEGIN { print  ( ( size * 8192.0 ) / ( 1.048576 * duration ) - audio_rate) }')

TEMP_DIR="$(mktemp -d)"
PASS_LOG_FILE="$TEMP_DIR/ffmpeg2pass"

# Perform the conversion
ffmpeg \
    -y \
    -i "$INPUT_FILE" \
    -c:v libx264 \
    -b:v "$T_VRATE"k \
    -pass 1 \
    -an \
    -f mp4 \
    -passlogfile $PASS_LOG_FILE \
    /dev/null \
&& \
ffmpeg \
    -i "$INPUT_FILE" \
    -c:v libx264 \
    -b:v "$T_VRATE"k \
    -pass 2 \
    -c:a aac \
    -b:a "$T_ARATE"k \
    -passlogfile $PASS_LOG_FILE \
    "$OUTPUT_FILE"

function cleanup() {
    [[ -n "$TEMP_DIR" && -d "$TEMP_DIR" ]] && rm -r "$TEMP_DIR" || echo "No $TEMP_DIR ok"
}

trap cleanup EXIT SIGINT
