#!/usr/bin/env python

import sys
import json
import subprocess

BSPC_CMD = 'bspc query -T -d -n .window'
p = subprocess.run(BSPC_CMD.split(' '), capture_output=True)
if p.returncode != 0:
    sys.exit(1)

desktopState = json.loads(p.stdout)
focusedNodeId = desktopState.get('focusedNodeId')

ACTIVE_FORMATTERS = (('F', '#FFFFFF', False), ('u', '#d7005f', True))
MAX_WIN_LEN = 10
OUTER_PADDING = 1

def formatText(str):
    strLen = len(str)
    if strLen > MAX_WIN_LEN:
        return f'{str[:strLen - 3]}...'
    elif strLen == MAX_WIN_LEN:
        return str
    padding = ' ' * ((MAX_WIN_LEN - strLen) // 2 + OUTER_PADDING)
    return padding + str + padding

def wrapFormatters(content, formatters):
    start, end = [], []
    for f, value, disable in formatters:
        end.append(f'-{f}' if disable else f'{f}-')
        start.append(f'%{{{f + value}}}')

    startFormat = f'{"".join(start)}'
    endFormat = f'%{{{" ".join(end)}}}' if len(end) else ''
    return startFormat + content + endFormat

def parseNode(node):
    if node == None:
        return []
    leftAndRight = [*parseNode(node.get('firstChild')), *parseNode(node.get('secondChild'))]

    if client := node.get('client'):
        className = client.get('className')
        nodeWinId = node.get('id')

        formattedText = formatText(className)
        wrappedStr = wrapFormatters(formattedText, ACTIVE_FORMATTERS) if nodeWinId == focusedNodeId else formattedText

        str = f'%{{A1:bspc node {nodeWinId} -f:}}{wrappedStr}%{{A}}' # wrap onclick action
        return [str, *leftAndRight]

    return leftAndRight

print(''.join(parseNode(desktopState.get('root'))), end='')
